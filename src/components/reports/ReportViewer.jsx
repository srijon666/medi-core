
import React from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { 
  FileText, 
  BarChart, 
  Calendar, 
  User, 
  FileType 
} from "lucide-react";

// Sample chart component (simplified)
const SampleChart = () => (
  <div className="w-full h-48 bg-muted rounded-md flex items-center justify-center">
    <BarChart className="h-12 w-12 text-muted-foreground" />
    <p className="ml-2 text-muted-foreground">Chart visualization</p>
  </div>
);

// Sample document component (simplified)
const SampleDocument = () => (
  <div className="w-full p-4 bg-muted rounded-md">
    <div className="space-y-2">
      <div className="h-4 w-3/4 bg-muted-foreground/20 rounded"></div>
      <div className="h-4 w-full bg-muted-foreground/20 rounded"></div>
      <div className="h-4 w-5/6 bg-muted-foreground/20 rounded"></div>
      <div className="h-4 w-full bg-muted-foreground/20 rounded"></div>
      <div className="h-4 w-2/3 bg-muted-foreground/20 rounded"></div>
    </div>
  </div>
);

const ReportViewer = ({ report, isOpen, onClose }) => {
  if (!report) return null;

  // Function to get badge color based on status
  const getStatusColor = (status) => {
    switch (status.toLowerCase()) {
      case "completed":
        return "bg-green-500 hover:bg-green-600";
      case "pending":
        return "bg-yellow-500 hover:bg-yellow-600";
      case "processing":
        return "bg-blue-500 hover:bg-blue-600";
      case "error":
        return "bg-red-500 hover:bg-red-600";
      default:
        return "bg-gray-500 hover:bg-gray-600";
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="text-xl font-bold flex items-center">
            {report.type === "chart" ? (
              <BarChart className="mr-2 h-5 w-5" />
            ) : (
              <FileText className="mr-2 h-5 w-5" />
            )}
            {report.name}
          </DialogTitle>
          <DialogDescription>
            {report.description || `${report.type === "chart" ? "Analytics" : "Document"} report in the ${report.category} category.`}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <Badge className={getStatusColor(report.status)}>
              {report.status.charAt(0).toUpperCase() + report.status.slice(1)}
            </Badge>
            <span className="text-sm text-muted-foreground">
              ID: {report.id}
            </span>
          </div>

          <Separator />

          <div className="grid grid-cols-[20px_1fr] items-start gap-4">
            <Calendar className="h-5 w-5 text-primary" />
            <div>
              <p className="font-medium">Generated On</p>
              <p className="text-sm text-muted-foreground">
                {report.date || new Date().toLocaleDateString()}
              </p>
            </div>
          </div>

          <div className="grid grid-cols-[20px_1fr] items-start gap-4">
            <User className="h-5 w-5 text-primary" />
            <div>
              <p className="font-medium">Generated By</p>
              <p className="text-sm text-muted-foreground">
                {report.author || "System"}
              </p>
            </div>
          </div>

          <div className="grid grid-cols-[20px_1fr] items-start gap-4">
            <FileType className="h-5 w-5 text-primary" />
            <div>
              <p className="font-medium">Category</p>
              <p className="text-sm text-muted-foreground">{report.category}</p>
            </div>
          </div>

          <Separator />

          <div className="py-2">
            <h3 className="font-medium mb-2">Report Content</h3>
            {report.type === "chart" ? <SampleChart /> : <SampleDocument />}
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Close
          </Button>
          <Button>
            {report.type === "chart" ? "Export Chart" : "Download PDF"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default ReportViewer;
